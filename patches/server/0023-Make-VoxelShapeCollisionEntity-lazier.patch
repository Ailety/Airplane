From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul Sauve <paul@technove.co>
Date: Sun, 9 May 2021 18:35:05 -0500
Subject: [PATCH] Make VoxelShapeCollisionEntity lazier


diff --git a/src/main/java/net/minecraft/world/phys/shapes/EntityCollisionContext.java b/src/main/java/net/minecraft/world/phys/shapes/EntityCollisionContext.java
index fcb7bd9f3b6b6ada0f2e5692bce32ab76b8798a7..da76c8487d431747f7af377ece74352d764f5d21 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/EntityCollisionContext.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/EntityCollisionContext.java
@@ -40,23 +40,55 @@ public class EntityCollisionContext implements CollisionContext {
 
     @Deprecated
     protected EntityCollisionContext(Entity entity) {
+        // Airplane start - remove the itemstacks & predicate
+        /*
         this(entity.isDescending(), entity.getY(), entity instanceof LivingEntity ? ((LivingEntity)entity).getItemBySlot(EquipmentSlot.FEET) : ItemStack.EMPTY, entity instanceof LivingEntity ? ((LivingEntity)entity).getMainHandItem() : ItemStack.EMPTY, entity instanceof LivingEntity ? ((LivingEntity)entity)::canStandOnFluid : (fluid) -> {
             return false;
         }, Optional.of(entity));
+         */
+        this(entity.isDescending(), entity.getY(), null, null, null, Optional.of(entity));
+        // Airplane end
     }
 
     @Override
     public boolean hasItemOnFeet(Item item) {
+        // Airplane start
+        if (this.footItem == null) {
+            Entity entity = this.entity.orElse(null);
+            if (entity instanceof LivingEntity livingEntity) {
+                return livingEntity.getItemBySlot(EquipmentSlot.FEET).is(item);
+            }
+            return ItemStack.EMPTY.is(item);
+        }
+        // Airplane end
         return this.footItem.is(item);
     }
 
     @Override
     public boolean isHoldingItem(Item item) {
+        // Airplane start
+        if (this.heldItem == null) {
+            Entity entity = this.entity.orElse(null);
+            if (entity instanceof LivingEntity livingEntity) {
+                return livingEntity.getMainHandItem().is(item);
+            }
+            return ItemStack.EMPTY.is(item);
+        }
+        // Airplane end
         return this.heldItem.is(item);
     }
 
     @Override
     public boolean canStandOnFluid(FluidState state, FlowingFluid fluid) {
+        // Airplane start
+        if (this.canStandOnFluid == null) {
+            Entity entity = this.entity.orElse(null);
+            if (entity instanceof LivingEntity livingEntity) {
+                return livingEntity.canStandOnFluid(fluid) && !state.getType().isSame(fluid);
+            }
+            return false;
+        }
+        // Airplane end
         return this.canStandOnFluid.test(fluid) && !state.getType().isSame(fluid);
     }
 
